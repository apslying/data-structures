import java.lang.Math;
import java.util.LinkedList;

public class Rook extends Piece {
	
	//maybe need this next line: 
	/*public int endRank;
	public int endFile;
	public int startRank=endRank;
	public int startFile=endFile;*/
	
	public LinkedList<Move> positionsAfterAllPossibleMoves(int[][] Pos, int rank, int file){
		int[][] tempPos=Pos;
		LinkedList<Move> rookMoves= new LinkedList<Move>(); 
		
		int newRank=rank+1; //north (from whites/both? perspective)
		int newFile=file;
		while(newRank<8){
			if (Pos[newRank][newFile]==0){
				Move aMove= new Move(Rook, rank, file, newRank, newFile);
				rookMoves.add(aMove);
				newRank++;
			}
			else{
				break;
			}
		}
		
		newRank=rank-1;//south
		newFile=file;
		while(newRank>=0){
			if (Pos[newRank][newFile]==0){
				Pos[rank][file]=0;
				Pos[newRank][newFile]=500;
				rookMoves.add(tempPos);
				newRank--;
			}
			else{
				break;
			}
		}
		
		newRank=rank;//east
		newFile=file+1;
		while(newFile<8){
			if (Pos[newRank][newFile]==0){
				Pos[rank][file]=0;
				Pos[newRank][newFile]=500;
				rookMoves.add(tempPos);
				newFile++;
			}
			else{
				break;
			}
		}
		
		newRank=rank;//west
		newFile=file-1;
		while(newFile>=0){
			if (Pos[newRank][newFile]==0){
				Pos[rank][file]=0;
				Pos[newRank][newFile]=500;
				rookMoves.add(tempPos);
				newFile--;
			}
			else{
				break;
			}
		}
		
		return rookMoves;
	}
	
	public void canMove(){
		//don't get sidetracked by small things like min and max not working. can fix that later.
		//again, dont be bothered by renameing, you can do that later
		while(max(endRank,endFile)<=7 && min(endRank,endFile)>=0){//this needs fixing. basically, N E S W of current rook position 
			if(Board[endRank][endFile]==null){//if the rook can move here, create a new node, and add to tree 
				EvalNode newNode= new EvalNode(startRank,startFile,endRank,endFile,countMaterial);
				//need to think about inserting nodes to the second level LATER. first only have one level eval, and simple eval 
				tree.insertNodeInto(newNode, root, int index);

			}
		}
		
			
	}

}
